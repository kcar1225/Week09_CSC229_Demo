/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author MoaathAlrajab
 */
public class Homework09 {
    
    // ToDo 01:  Write an algorithm to solve the following problem
    /*
    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over one hundred divisors?
    
    */
    
    

        public static void main(String[] args) {
            // Call the method to find  over 100 divisors number, set to 100
            findTriangleNumberWithDivisors(100);
        }

        // Method to find the triangle number with over a certain number of divisors
        public static void findTriangleNumberWithDivisors(int divisorsNum) {
            int n = 1;
            while (true) {
                // Calculate the triangle number  for n
                long triangleNum = getTriangleNumber(n);
                // Determine the numbers of the divisors of the triangle number
                int divisorsCount = countDivisors(triangleNum);
                // Check for the divisor limit
                if (divisorsCount > divisorsNum) {
                    System.out.println("Triangle Number: " + triangleNum);   //print
                    System.out.print("Divisors: ");
                    printDivisors(triangleNum);
                    break; // Exit the loop when the condition is met
                }
                n++;
            }
        }

        // Method to calculate the nth triangle number
        public static long getTriangleNumber(int n) {
            return n * (n + 1) / 2;
        }


        public static int countDivisors(long num) {   // Method counts the number of divisors
            int count = 0;
            // Iterate up to the square root of the number to find divisors
            for (int i = 1; i <= Math.sqrt(num); i++) {
                if (num % i == 0) {
                    count += 2; // Increment by 2 because we found two divisors
                }
            }
            // If num is a perfect square, we need to count--1
            if (Math.sqrt(num) * Math.sqrt(num) == num) {
                count--;
            }
            return count;
        }

        // Method to print the divisors
        public static void printDivisors(long num) {
            for (int i = 1; i <= Math.sqrt(num); i++) {
                if (num % i == 0) {
                    System.out.print(i + " ");
                    if (num / i != i) {
                        System.out.print(num / i + " ");
                    }
                }
            }
            System.out.println();
        }
    }



